[{
    "title": "Is there a way to recover a file Envtools may have modified?",
    "tags": ["backup", "restore", "recover"],
    "content": "<p>Any existing files that are being modified or removed by Envtools are backed up under <code>$HOME/.envtools/backup</code></p><p>For example if you execute a command via Envtools at precisely 4:31pm on November 5th 2016, a backup folder will be created and filled with any files that may have been changed. The folder is that case would be: <code>$HOME/.envtools/backup/11052016-16h31m/</code></p> ",
    "id": "faq-0",
    "group": "faq-general"
  }, {
    "title": "My custom prompt disappeared, how do I get it back?",
    "tags": ["prompt", "bash"],
    "content": "<p>Envtools comes with a few custom bash prompts (displaying some extra information like proxy, sinopia, git or node status). If you ran <code>envtools auto</code>, Envtools is installing its default prompt (the one displaying proxy and git status). You can change this by running <code>envtools config</code> and disable the option called <em>Enable Envtools Custom Command Line Prompt.</em></p> ",
    "id": "faq-1",
    "group": "faq-general"
  }, {
    "title": "Envtools asks for a proxy... Do I need a proxy?",
    "tags": ["proxy"],
    "content": "<p>If you're asking, probably no <span class=\"glyphicon glyphicon-heart-empty\" aria-hidden=\"true\"></span>. This is an option mostly geared towards corporate employees who have to provide a proxy in order to access the internet.</p>",
    "id": "faq-2",
    "group": "faq-general"
  }, {
    "title": "I set up a proxy with Envtools and now I cannot connect to anything...",
    "tags": ["proxy"],
    "content": "<p>There could be at least 3 reasons why you cannot connect to anything anymore.</p><ul><li>You setup an invalid proxy.</li><li>You setup an valid proxy but it's not enabled.</li><li>You setup an valid proxy, it's enabled, but you don't need one.</li></ul><p>You can check the state of the proxy (ON or OFF) as well as what proxy is currently configured by typing the command <code>pq</code> in a command prompt. Make sure the proxy url is valid, including the protocol (http or https) and the port.</p><p>Once you figure what is wrong you can either enable/disable the proxy by typing <code>pon</code> or <code>poff</code> respectively, or you can reconfigure the actual proxy URL/protocol/port by typing <code>envtools manual</code> and choosing the option <em>Setup/Enable/Disable a proxy.</em></p>",
    "id": "faq-3",
    "group": "faq-general"
  }, {
    "title": "Envtools mentions jsBeautify configuration... Do I need this?",
    "tags": ["jsbeautify", "beautify", "format", "pretty"],
    "content": "<p>The jsBeautify configuration file generated by Envtools can be used by editors that support its format, for example Atom package <strong>atom-beautify</strong> and Sublime Text package <strong>jsFormat</strong>. Those packages re-format and beautify javscript code according to the rules set in the aforementioned configuration file (replace tabs with spaces, indentation, etc.) Available options are listed <a href=\"https://github.com/beautify-web/js-beautify\" target=\"_blank\">here</a>.</p><p>The generated file is <code>$HOME/.jsbeautifyrc</code></p>",
    "id": "faq-4",
    "group": "faq-general"
  }, {
    "title": "Core node packages and npm configuration provided by Envtools",
    "tags": ["npm", "core", "packages", "node"],
    "content": "<p>Either via <code>envtools auto</code> or <code>envtools manual</code>, you can install a few core node packages globally. Those packages are meant to be used at the command line or through an editor (e.g. Grunt, Gulp, ESLint, etc.). Note that you can pick and choose which packages you want to install. If you happen to have a proxy setup via Envtools, the command will also update your npm configuration file to reflect that proxy (the file is <code>$HOME/.npmrc</code>).</p>",
    "id": "faq-5",
    "group": "faq-general"
  }, {
    "title": "What's the story with Sinopia, Proxy and Node v6?",
    "tags": ["sinopia"],
    "content": "<p>If you are working behind a proxy and you use Node v6 or above, there is a good chance that your node package installations are taking forever... If that is your case, you are a good candidate to try out Sinopia. Sinopia is a npm registry that runs locally, in front of the public npmjs.com registry. Once installed, configured and running, any <code>npm install xyz</code> will go through your local Sinopia first, and then to npmjs.com if the package is not found. You can read more in the Sinopia tab <a href=\"/?sinopia\">here</a>.</p>",
    "id": "faq-6",
    "group": "faq-general"
  },


  {
    "title": "Envtools asks for my password, why is that?",
    "tags": ["sudo", "local", "npm", "ruby", "password"],
    "content": "<p>There are 2 cases where Envtools may need your password to run elevated actions. To being able to install node packages as well as ruby gems without requiring sudo all the time, Envtools will ask you if you want to change the ownership of the folder <code>/usr/local</code>. Another case would be if you did not agree to changing the ownership but subsequently asked to install a core node package. In that case, you need to provide your password.</p>",
    "id": "faq-behind-1",
    "group": "faq-behind"
  }, {
    "title": "There is an option to load Envtools automatically. What is that?",
    "tags": ["load", "envtools", "shell", "bash", "aliases"],
    "content": "<p>Envtools is a node package that comes with a few node commands (auto, encrypt, timer, etc.) and with a set of shell scripts and aliases. When you installed Envtools via npm, the only thing availabe are the node commands. The commands are listed on the <a href=\"/?commands\">commands tab</a>. To actually load the shell scripts and aliases, you need to update your <code>.profile</code> or <code>.bash_profile</code> files to target those scripts explicitly. That's where the option <em>Automatically load Envtools at each session</em> comes in. Enabling this option tells Envtools to add itself to those profile files, therefore enhancing your prompt experience automatically. The shell scripts and aliases provided by Envtools are listed on the <a href=\"/?aliases\">aliases tab</a>.</p>",
    "id": "faq-behind-1a",
    "group": "faq-behind"
    },{
    "title": "Envtools says Maven has been installed, where is it?",
    "tags": ["maven"],
    "content": "<p><code>envtools auto</code> and <code>envtools manual</code> offer the option to install Maven for you. The location of that installation is <code>$HOME/.envtools/apache-maven-3.3.9</code></p>",
    "id": "faq-behind-2",
    "group": "faq-behind"
  }, {
    "title": "What does Envtools do with my git information?",
    "tags": ["git", "github", "username"],
    "content": "<p>If you ran <code>envtools auto</code> or <code>envtools manual</code> you may have been asked to provide several personal git information (namely your full name, your email and your github id if you have one). Envtools is using this data to generate a standard git configuration file under <code>$HOME/.gitconfig</code>. This file is in turn used by git for commits, clones, etc. The options are set by running the following commands:</p> <ul> <li><code>git config --global user.name your-full-name</code></li> <li><code>git config --global user.email your-email</code></li> <li><code>git config --global color.diff auto</code></li> <li><code>git config --global color.status auto</code></li> <li><code>git config --global color.ui auto</code></li> <li><code>git config --global url.\"https://github.com/\".insteadOf \"git://github.com/\"</code></li> <li><code>git config --global alias.st status</code></li> <li><code>git config --global alias.d diff</code></li> <li><code>git config --global alias.br branch</code></li> <li><code>git config --global alias.ci commit</code></li> <li><code>git config --global alias.co checkout</code></li> <li><code>git config --global diff.tool opendiff</code> (macOS only)</li> <li><code>git config --global merge.tool opendiff</code> (macOS only)</li> <li><code>git config --global push.default simple</code></li> <li><code>git config --global http.sslVerify false</code></li> </ul>",
    "id": "faq-behind-3",
    "group": "faq-behind"
  }, {
    "title": "Which version of nvm is being installed?",
    "tags": ["nvm"],
    "content": "<p>The version of <a href=\"https://github.com/creationix/nvm\" target=\"_blank\">nvm</a> installed via <code>envtools extra</code> is <strong>0.32.0</strong> </p>",
    "id": "faq-behind-4",
    "group": "faq-behind"
  }, {
    "title": "Envtools says nvm has been installed, where is it?",
    "tags": ["nvm"],
    "content": "<p><a href=\"https://github.com/creationix/nvm\" target=\"_blank\">nvm</a> installed via <code>envtools extra</code> is located under <code>$HOME/.envtools/nvm</code>. If you use nvm to install a few different versions of node, they all can be found under <code>$HOME/.envtools/nvm/versions/node/</code></p>",
    "id": "faq-behind-5",
    "group": "faq-behind"
  }, {
    "title": "There is an option to \"fix screensavers options\"... What is that?",
    "tags": ["screensavers", "screensaver", "fix", "macOS"],
    "content": "<p><strong>NOTE:</strong> this only applies to macOS.</p><p>Sometimes the screensaver configuration files can become corrupted or un-writable which means that no matter what changes you make in the <em>System Preferences->Desktop & Screen Saver</em>, they are not going to persist. The next time you reboot, your changes will be lost. This is where Envtools tries to fix this issue by simply wiping out the screensaver configuration files under <code>$HOME/Library/Preferences/ByHost/com.apple.screensaver*.*</code></p>",
    "id": "faq-behind-6",
    "group": "faq-behind"
  }

]
