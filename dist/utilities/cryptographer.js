"use strict";var _slicedToArray=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{!d&&h["return"]&&h["return"]()}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();const crypto=require("crypto"),CRYPTO_ALGO="aes-256-ctr",BYTES_FOR_IV=16,HEX="hex",UTF8="utf8",_createHash=(a,b="md5")=>crypto.createHash(b).update(a,"utf8").digest(HEX),_encrypt=(a,b)=>{const c=new Buffer(crypto.randomBytes(BYTES_FOR_IV)),d=_createHash(a),e=crypto.createCipheriv(CRYPTO_ALGO,d,c),f=e.update(b,"utf8",HEX)+e.final(HEX);return`${f}$${c.toString(HEX)}`},_decrypt=(a,b)=>{var c=b.split("$"),d=_slicedToArray(c,2);const e=d[0],f=d[1],g=new Buffer(f,HEX),h=_createHash(a),i=crypto.createDecipheriv(CRYPTO_ALGO,h,g);return i.update(e,HEX,UTF8)+i.final("utf8")};exports.encrypt=_encrypt,exports.decrypt=_decrypt,exports.createHash=_createHash;