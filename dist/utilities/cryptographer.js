'use strict';const inquirer=require('inquirer'),fs=require('fs-extra'),path=require('path'),crypto=require('crypto'),log=require('fedtools-logs'),CRYPTO_ALGO='aes-256-ctr';function _encrypt(a,b){const c=crypto.createCipher(CRYPTO_ALGO,a),d=Buffer.concat([c.update(b),c.final()]);return d}function _decrypt(a,b){const c=crypto.createDecipher(CRYPTO_ALGO,a),d=Buffer.concat([c.update(b),c.final()]);return d}function _getPassword(a,b,c){const d={type:'password',name:'password',message:b||'Enter password:',validate(a){return!!a||'Password cannot be empty...'}};return a?c(null,a):void inquirer.prompt(d).then(function(a){c(null,a.password)})}const _prompt=(a)=>{let b,c;if(!a.file||!fs.existsSync(a.file))throw'Invalid argument, file is missing';else b=path.resolve(a.file);a.output||(a.status=!1),c=a.encrypt?'Enter password to encrypt file:':'Enter password to decrypt file:',_getPassword(a.password,c,function(c,d){if(c)throw c;a.encrypt?(a.status&&log.info('Encrypting file...'),fs.readFile(b,function(c,e){if(c)throw c;return a.output?void fs.writeFile(a.output,_encrypt(d,e),function(c){if(c)throw c;return a.status&&(log.success(`${path.basename(b)} was successfully encrypted.`),log.echo('Encrypted file is ',a.output)),new Promise((b)=>{b(a)})}):(process.stdout.write(_encrypt(d,e)),new Promise((b)=>{b(a)}))})):(a.status&&log.info('Decrypting file...'),fs.readFile(b,function(c,e){if(c)throw c;return a.output?void fs.writeFile(a.output,_decrypt(d,e),function(c){if(c)throw c;return a.status&&(log.success(`${path.basename(b)} was successfully decrypted.`),log.echo('Decrypted file is ',a.output)),new Promise((b)=>{b(a)})}):(process.stdout.write(_decrypt(d,e)),new Promise((b)=>{b(a)}))}))})};exports.prompt=_prompt,exports.encrypt=_encrypt,exports.decrypt=_decrypt;