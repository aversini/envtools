#!/usr/bin/env node
'use strict';var program,parameter,prop,USER_ABORT=-2,_=require('lodash'),waterfall=require('async/waterfall'),inquirer=require('inquirer'),optimist=require('optimist'),log=require('fedtools-logs'),utilities=require('fedtools-utilities'),cmd=require('fedtools-commands'),STR_NO_TAGS='No tags found in the current repository',cwd=process.cwd(),commandList=[],gitCommands={info:{description:' .............. Extract some information about the current repository.'},addTag:{description:' ............ Add a tag to the current commit.'},removeTag:{description:' ......... Remove the most recent tag from the repository.'},listTag:{description:' ........... List the current tag (if any) of the current commit.\n                     Use --all to list all tags in chronological order.'}};for(prop in gitCommands)gitCommands.hasOwnProperty(prop)&&prop&&commandList.push(prop);commandList.sort(),optimist=require('optimist').usage(log.strToColor('cyan','Usage: ')+'gith '+commandList.join('|')),program=optimist.argv,program._&&1===program._.length&&(parameter=program._[0]);function showHelp(){var a,b;for(log.rainbow(optimist.help().replace('\n','')),log.rainbow(log.strToColor('cyan','Commands:')),log.echo(''),b=commandList.length,a=0;a<b;a+=1)log.rainbow(' '+log.strToColor('yellow',commandList[a])+gitCommands[commandList[a]].description);log.echo(''),console.log(log.strToColor('cyan','Description:')),console.log(''),console.log(' This script is a helper tool to run several git commands.'),console.log(''),console.log('')}function isGitRepository(a){cmd.run('git symbolic-ref HEAD',{pwd:cwd,status:!1},a)}function gitAddTag(a){waterfall([function(a){utilities.git.getLatestTag({},function(b,c){!b&&c.stdout&&log.info('The most recent tag is (%s)...',c.stdout),a()})},function(a){inquirer.prompt([{type:'input',name:'tagName',message:'Please type a tag number to add (ex: 2.9.0rc1):'}]).then(function(b){return b.tagName?a(null,b.tagName):a(-1)})},function(a,b){cmd.run('git tag -a '+a+' -m tagging-'+a,{pwd:cwd},function(a,c){return a&&c&&log.echo(c),b(a)})}],function(b,c){return a(b,c)})}function gitRemoveTag(a){waterfall([function(a){utilities.git.getLatestTag({},function(b,c){return!b&&c.stdout?(log.info('The most recent tag (%s) will be removed...',c.stdout),a(null,c.stdout)):void a(-1)})},function(a,b){inquirer.prompt([{type:'confirm',name:'continueFlow',message:'Continue',default:!0}]).then(function(c){return c.continueFlow?b(null,a):b(USER_ABORT)})},function(a,b){cmd.run('git tag -d '+a,{pwd:cwd},b)}],function(b,c){a(b,c)})}function gitInfo(a){var b;log.title('Repository overview'),waterfall([function(a){cmd.run('git remote show',{pwd:cwd,status:!1},function(b,c,d){var e;return d?(e=_.compact(d.split('\n')).sort(),a(null,e)):a(-1)})},function(a,c){a.forEach(function(a){log.echo(),log.title('Remote ('+a+'):'),b=cmd.run('git remote show '+a,{pwd:cwd,verbose:!1,status:!1}),b&&b.output&&(console.log(b.output),b=null)}),c()},function(a){cmd.run('git status -s',{pwd:cwd,status:!1},function(b,c,d){a(null,d)})},function(a,b){return log.echo(),log.title('Status:'),a?void cmd.run('git status -s',{pwd:cwd,verbose:!0,status:!1},function(){b()}):(log.echo('  Working directory is clean'),b())},function(a){log.echo(),log.title('Recent logs:'),b=cmd.run('git log -10 --pretty=format:\'%ad [ %an ] %s\' --date=local',{pwd:cwd,status:!1,verbose:!1}),b&&b.output&&(console.log(b.output),b=null),a()}],function(b,c){a(b,c)})}isGitRepository(function(a){if(a)return void log.error('The current directory is not a git repository...');switch(parameter){case'list':case'listTag':program.all?utilities.git.getAllTags({},function(a,b){b&&b.stdout&&b.stdout.length?_.each(b.stdout,function(a){log.rainbow('%s [%s] [%s] %s',a.tag,a.author,a.date,a.subject)}):log.notice(STR_NO_TAGS)}):utilities.git.getLatestTag({},function(a,b){b&&b.stdout?log.echo(b.stdout):log.notice(STR_NO_TAGS)});break;case'add':case'addTag':gitAddTag(function(a){a&&-1===a&&log.echo('Bye then!')});break;case'remove':gitRemoveTag(function(a){a&&(-1===a&&log.notice(STR_NO_TAGS),a===USER_ABORT&&log.echo('Bye then!'))});break;case'info':gitInfo(function(a){a&&log.error(a),log.echo()});break;case'test':case'wt':utilities.git.getAllTags({},function(a,b){b&&console.log('==> stdout: ',b.stdout)});break;default:log.echo(),showHelp(),process.exit(0);}});