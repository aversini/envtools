'use strict';const MAX_FILE_SIZE_BYTES=2e7,each=require('async/each'),fs=require('fs'),utilities=require('fedtools-utilities'),common=require('./common'),path=require('path'),extname=path.extname,basename=path.basename,cwd=process.cwd(),fileBlacklist=/\.pyc|\.class|\.java~|\.tar|\.gif|\.jpg|\.jpeg|\.pdf|\.png|\.tgz|\.doc|\.xls|\.tar\.gz|\.swp|\.zip|\.dmg|\.jar|\.svg|\.eot|\.ttf|\.woff|\.icns|\.hds|\.a|\.so/gi,dirBlacklist=/node_modules|(^|\/)\.[^\/\.]/gi;let reFlag,rePattern,totalOccurrences=0,totalFilesMatched=0,debug=!1,verbose=!1,boring=!1,ignoreBlacklists=!1;const optimist=require('optimist').usage('\nDescription:\n Search for a pattern in all non-hidden and readable files\n within the current directory. This is an enhanced version\n of a find and a grep.\n\nUsage: fgrs [options] -p <search pattern> ').options('p',{demand:!0,alias:'pattern',describe:'a regular expression to match'}).options('i',{alias:'ignore-case',describe:'ignore case distinctions'}).options('g',{alias:'grep',describe:'display grep output'}).options('e',{alias:'ext',describe:'look only for file with extension *.value'}).options('b',{alias:'boring',describe:'do not use color output'}).options('d',{alias:'debug',describe:'display debbuging information'}).options('r',{alias:'rainbow',describe:'do not ignore any files or folders'}).options('s',{alias:'stats',describe:'display some statistics'}).boolean(['b','d','s','g','r']),program=optimist.argv;program._.length&&(optimist.showHelp(),process.exit(1)),'string'==typeof program.ext&&(program.extension=`.${program.ext.slice(program.ext.lastIndexOf('.')+1)}`),reFlag=program['ignore-case']?'ig':'g','string'==typeof program.pattern||'number'==typeof program.pattern?rePattern=new RegExp(program.pattern,reFlag):(optimist.showHelp(),process.exit(1)),program.stats&&(verbose=!0),program.boring&&(boring=!0),program.debug&&(debug=!0,verbose=!0,boring=!1),program.grep&&(boring=!1),program.rainbow&&(ignoreBlacklists=!0);function scanFiles(a,b){let c=!0;each(a,function(a,b){let d,e;const f=[];(function(g,h){if(g)throw g;return h.split('\n').forEach(function(a,b){rePattern.lastIndex=0,rePattern.test(a)&&f.push([b,a])}),f.length&&(d=1===f.length?'occurrence':'occurrences',e='',totalOccurrences+=f.length,++totalFilesMatched,e=boring?'./%s':`  ${common.LOG_COLORS.gray('./%s')}`,verbose?(c&&!boring&&(console.log(''),c=!1),console.log(`${e} (%d ${d})`,path.relative(cwd,a),f.length)):(c&&!boring&&(console.log(''),c=!1),console.log(e,path.relative(cwd,a))),program.grep&&(f.forEach(function(a){const b=a[0];a=a[1],rePattern.lastIndex=0;const d=rePattern.exec(a);a=common.LOG_COLORS.gray(a.replace(rePattern,common.LOG_COLORS.focusBg(d[0]))),c&&(console.log(''),c=!1),console.log('  %d: %s',b+1,a)}),c&&(console.log(''),c=!1),console.log(''))),b(null)})(null,fs.readFileSync(a,'utf8'))},function(c){return b(c,{o:totalOccurrences,f:totalFilesMatched,s:a.length})})}function ignoreFolders(a,b){return!ignoreBlacklists&&b.isDirectory()&&dirBlacklist.exec(basename(a))}function ignoreFiles(a,b){if(ignoreBlacklists)return!1;if(b.isFile()){if(extname(a).match(fileBlacklist))return!0;if(program.extension)return program.extension!==extname(a);if(b.size>MAX_FILE_SIZE_BYTES)return!0}}function findFiles(a,b){utilities.readdir(a,[ignoreFolders,ignoreFiles],function(a,c){b(a,c)})}verbose&&utilities.performance.mark('fgrs-1'),findFiles(cwd,function(a,b){let c;if(a)throw a;utilities.performance.mark('fgrs-2'),0<b.length?scanFiles(b,function(a,d){let e,g;if(utilities.performance.mark('fgrs-3'),a)throw new Error(a);verbose?(console.log(''),debug&&(console.log('\n[DEBUG] all files:'),b.forEach(function(a){console.log(a)}),console.log('')),d&&(e=1===d.o?'occurrence found    : ':'occurrences found   : ',g=1===d.f?'file matching       : ':'files matching      : ',console.log('  Total %s%d',e,d.o),console.log('  Total %s%d',g,d.f),console.log('  Total files scanned       :',b.length)),utilities.performance.measure('totalTime','fgrs-1','fgrs-3'),c=utilities.performance.getEntriesByName('totalTime'),c&&c[0].duration&&console.log(`  Elapsed time              : ${utilities.formatMillisecondsToHuman(c[0].duration)}`),debug&&(utilities.performance.measure('findFiles','fgrs-1','fgrs-2'),c=utilities.performance.getEntriesByName('findFiles'),c&&c[0].duration&&console.log(`  Elapsed time in findFiles : ${utilities.formatMillisecondsToHuman(c[0].duration)}`),utilities.performance.measure('scanFiles','fgrs-2','fgrs-3'),c=utilities.performance.getEntriesByName('scanFiles'),c&&c[0].duration&&console.log(`  Elapsed time in scanFiles : ${utilities.formatMillisecondsToHuman(c[0].duration)}`)),console.log('')):!boring&&d.o&&console.log('')}):verbose&&(console.log(''),console.log('  Total occurrences found   : 0'),console.log('  Total files matching      : 0'),console.log('  Total files scanned       : 0'),utilities.performance.measure('totalTime','fgrs-1','fgrs-2'),c=utilities.performance.getEntriesByName('totalTime'),c&&c[0].duration&&console.log(`  Elapsed time              : ${utilities.formatMillisecondsToHuman(c[0].duration)}`),console.log(''))});